name: Bootstrap KUBE_CONFIG from StepCA
on:
    workflow_call:
      inputs:
        CLUSTER_URL:
          description: Cluser URL, e.g. https://kube01.icncd.ru:6443
          type: string
          default: https://kube01.icncd.ru:6443
        CA_URL:
          description: Step CA URL, e.g. https://ca.iconicompany.com:7443
          type: string
          default: https://ca.iconicompany.com:7443
        CA_FINGERPRINT:
          description: Root CA fingerprint
          type: string
          default: 8cbfb715df6166dca2bf680fa0418a3ba42344be6abb0a4b5a0d7800ad835c27
        OIDC_CLIENT_ID:
          description: OIDC Client ID, e.g. api://SmallstepCAProvisioner
          type: string
          default: api://SmallstepCAProvisioner
        PROVISIONER:
          description: OIDC Provisioner
          type: string
          default: github-actions
        NOT_AFTER:
          description: Certificate lifetime 
          type: string
          default: 1h
        CONTEXT:
          description: KUBECONFIG context name 
          type: string
          default: default
      # Map the workflow outputs to job outputs
      outputs:
        CERTIFICATEAUTHORITY:
          description: "Certificate authority"
          value: ${{ jobs.bootstrapjob.outputs.CERTIFICATEAUTHORITY }}
        #CERTIFICATE:
        #  description: "Generated certificate"
        #  value: ${{ jobs.bootstrapjob.outputs.CERTIFICATE }}
        #PRIVATEKEY:
        #  description: "Private key"
        #  value: ${{ jobs.bootstrapjob.outputs.PRIVATEKEY }}
        KUBE_CONFIG:
          description: "KUBECONFIG in BASE64"
          value: ${{ jobs.bootstrapjob.outputs.KUBE_CONFIG }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  bootstrapjob:
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      CERTIFICATEAUTHORITY: ${{ steps.bootstrap.outputs.CERTIFICATEAUTHORITY }}
      #CERTIFICATE: ${{ steps.certificate.outputs.CERTIFICATE }}
      #PRIVATEKEY: ${{ steps.certificate.outputs.PRIVATEKEY }}
      KUBE_CONFIG: ${{ steps.kubeconfig.outputs.KUBE_CONFIG }}
    steps:
      - name: CA bootstrap
        id: bootstrap
        run: |
          curl -LO https://dl.smallstep.com/cli/docs-cli-install/latest/step-cli_amd64.deb
          sudo dpkg -i step-cli_amd64.deb
          step ca bootstrap --ca-url ${{ inputs.CA_URL}} --fingerprint ${{ inputs.CA_FINGERPRINT }}
          echo 'CERTIFICATEAUTHORITY<<EOF' >> $GITHUB_OUTPUT
          cat ${HOME}/.step/certs/root_ca.crt >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo "CERTIFICATEAUTHORITY_BASE64=$(cat ${HOME}/.step/certs/root_ca.crt | base64 -w0)" >> $GITHUB_OUTPUT
      - name: Issue certificate
        id: certificate
        run: |
          TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=${{ inputs.OIDC_CLIENT_ID }}" | jq -r .value)
          curl -sLO https://token.actions.githubusercontent.com/.well-known/jwks
          echo $TOKEN | step crypto jwt verify \
            --jwks jwks \
            --aud ${{ inputs.OIDC_CLIENT_ID }} \
            --iss "https://token.actions.githubusercontent.com"
          SUBSCRIBER=$(echo $TOKEN | step crypto jwt inspect --insecure | jq -r .payload.sub)
          step ca certificate $SUBSCRIBER github.crt github.key \
            --provisioner ${{ inputs.PROVISIONER }} \
            --token "$TOKEN" \
            --not-after ${{ inputs.NOT_AFTER }}
          step certificate inspect github.crt
          #echo 'CERTIFICATE<<EOF' >> $GITHUB_OUTPUT
          #cat github.crt >> $GITHUB_OUTPUT
          #echo 'EOF' >> $GITHUB_OUTPUT
          #echo 'PRIVATEKEY<<EOF' >> $GITHUB_OUTPUT
          #cat github.key >> $GITHUB_OUTPUT
          #echo 'EOF' >> $GITHUB_OUTPUT
          echo "CERTIFICATE_BASE64=$(cat github.crt | base64 -w0)" >> $GITHUB_OUTPUT
          echo "PRIVATEKEY_BASE64=$(cat github.key | base64 -w0)" >> $GITHUB_OUTPUT
          rm github.key
      - name: Generate KUBE_CONFIG
        id: kubeconfig
        run: |
          KUBE_CONFIG_STRING=$(cat << EOF
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority-data: ${CERTIFICATEAUTHORITY_BASE64}
              server: ${CLUSTER_URL}
            name: ${CONTEXT}
          contexts:
          - context:
              cluster: ${CONTEXT}
              user: ${CONTEXT}
            name: ${CONTEXT}
          current-context: ${CONTEXT}
          kind: Config
          preferences: {}
          users:
          - name: ${CONTEXT}
            user:
              client-certificate-data: ${CERTIFICATE_BASE64}
              client-key-data: ${PRIVATEKEY_BASE64}
          EOF
          )
          echo 'KUBE_CONFIG<<EOF' >> $GITHUB_OUTPUT
          echo "$KUBE_CONFIG_STRING" | base64 >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT          
        env:
          CLUSTER_URL: ${{ inputs.CLUSTER_URL }}
          CERTIFICATEAUTHORITY_BASE64: ${{ steps.bootstrap.outputs.CERTIFICATEAUTHORITY_BASE64 }}
          CERTIFICATE_BASE64: ${{ steps.certificate.outputs.CERTIFICATE_BASE64 }}
          PRIVATEKEY_BASE64: ${{ steps.certificate.outputs.PRIVATEKEY_BASE64 }}
          CONTEXT: ${{ inputs.CONTEXT }}
