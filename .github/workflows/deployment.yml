name: Deployment
on:
    workflow_call:
      inputs:
        registry:
          description: Custom container registry, e.g. registry.gitlab.com/owner/repo. Will use ghcr.io/owner/repo/repo by default
          type: string
        context:
          description: KUBECONFIG context name (production, staging, testing, etc)
          type: string
          default: default
        env:
          description: Werf env (production, branch name, pull request number, author, etc). Default value is branch/tag name "github.head_ref || github.ref_name"
          type: string
        setenv:
          description: Some env variable, e.g. env.DOMAIN=example.com
          type: string
        label:
          description: Pull request label to converge (review by default)
          type: string
          default: review
        CLUSTER_URL:
          description: Cluser URL, default https://kube01.icncd.ru:6443
          type: string
          default: https://kube01.icncd.ru:6443
        STEP_CA_URL:
          description: Step CA URL, default https://ca.iconicompany.com:4443
          type: string
          default: https://ca.iconicompany.com:4443
        STEP_FINGERPRINT:
          description: Root CA fingerprint
          type: string
          default: a08919780dddca4f4af0a9f68952d6379d7060c30b98d396c61aaa3fd0295838
      secrets:
        REGISTRY_USERNAME:
          description: Container registry login. If not set, github.actor is used
        REGISTRY_PASSWORD:
          description: Container registry password.  If not set, secrets.GITHUB_TOKEN is used
        WERF_SECRET_KEY:
          description: Key for secret files/values. Required if secret files/values used in templates.
        KUBE_CONFIG:
          description: K8s config in base64

concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

env:
  WERF_ENV: ${{ inputs.env || github.head_ref || github.ref_name }} 
  WERF_KUBE_CONTEXT: ${{ inputs.context }}
  WERF_SET_ENV: ${{ inputs.setenv }}
  WERF_REPO: ${{ inputs.registry }}
  WERF_SECRET_KEY: ${{ secrets.WERF_SECRET_KEY }}
  IS_LABELED_PR: ${{ github.event_name == 'pull_request' && contains( github.event.pull_request.labels.*.name, inputs.label ) }}

permissions:
    id-token: write # This is required for requesting the JWT
    contents: read  # This is required for actions/checkout
  
jobs:
  deployment:
    name: Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Step CA bootstrap
        id: bootstrap
        run: |
          curl -Ls https://github.com/iconicompany/werftest/raw/main/scripts/step-github.sh | bash -
          cat $HOME/.kube/config
          echo 'KUBE_CONFIG<<EOF' >> $GITHUB_OUTPUT
          cat $HOME/.kube/config | base64 >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        env:
          STEP_CA_URL: ${{ inputs.STEP_CA_URL }}
          STEP_FINGERPRINT: ${{ inputs. STEP_FINGERPRINT }}
          CLUSTER_URL: ${{ inputs.CLUSTER_URL }}
          CONTEXT: ${{ inputs.CONTEXT }}
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Login to Registry
        if: inputs.registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.REGISTRY_USERNAME || github.actor }}
          password: ${{ secrets.REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}
      - name: Werf converge
        uses: werf/actions/converge@v1.2
        if: ${{ github.event_name == 'push' || env.IS_LABELED_PR == 'true' && github.event.action != 'closed' }}
        with:
          kube-config-base64-data: ${{ secrets.KUBE_CONFIG || steps.bootstrap.outputs.KUBE_CONFIG }}
          env: ${{ env.WERF_ENV }}
      - name: Werf dismiss
        uses: werf/actions/dismiss@v1.2
        if: ${{ github.event_name == 'pull_request' && ((github.event.action == 'closed' && env.IS_LABELED_PR == 'true') || (github.event.action == 'unlabeled' && env.IS_LABELED_PR == 'false')) }}
        with:
          kube-config-base64-data: ${{ secrets.KUBE_CONFIG || steps.bootstrap.outputs.KUBE_CONFIG }}
          env: ${{ env.WERF_ENV }}
